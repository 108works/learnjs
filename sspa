#!/usr/bin/env bash

abspath="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
root_dir=`dirname $abspath`

function check_python() {
  if ! which python > /dev/null; then
    echo "Can't find Python. You need Python 2.7 or later to use this."
    exit 1
  fi
}

function check_aws() {
  if ! which aws > /dev/null; then
    echo "Can't find AWS CLI. Install 'awscli' using pip."
    exit 1
  fi
}

function dev_server() {
  cd public
  exec python -m SimpleHTTPServer 9292
  popd
}

function create_s3_bucket() {
  local bucket_name=$1
  local bucket_uri="s3://${bucket_name}"
  aws s3 mb $bucket_uri
  aws s3 website \
    --index-document index.html \
    --error-document error.html \
    $bucket_uri
  local region=$(aws configure get region)
  echo "Website endpoint is: http://${1}.s3-website-${region}.amazonaws.com"
}

function deploy_s3_bucket() {
  local bucket_uri="s3://$1"
  aws s3 sync public/ $bucket_uri --acl public-read
}

function generate_assume_role_policy() {
  local identity_pool_arn=$1
cat <<DOC
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Federated": "cognito-identity.amazonaws.com"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "cognito-identity.amazonaws.com:aud": "${identity_pool_arn}"
        },
        "ForAnyValue:StringLike": {
          "cognito-identity.amazonaws.com:amr": "authenticated"
        }
      }
    }
  ]
}
DOC
}

function create_cognito_auth_role() {
  local identity_pool_dir=$1
  local pool_id=$(support/jsed.py ${identity_pool_dir}/pool_info.json 'IdentityPoolId')
  local pool_name=$(support/jsed.py ${identity_pool_dir}/pool_info.json 'IdentityPoolName')
  generate_assume_role_policy ${pool_id} > ${identity_pool_dir}/assume_role_policy.json
  if [[ ! -s ${identity_pool_dir}/role_info.json ]]; then
    local role_name="${pool_name}_cognito_authenticated"
    echo "Creaing role: $role_name"
    aws iam create-role \
      --role-name "$role_name" \
      --assume-role-policy-document "file://${identity_pool_dir}/assume_role_policy.json" \
      > ${identity_pool_dir}/role_info.json
  fi
}


function create_identity_pool() {
  local identity_pool_dir=$1
  if [[ ! -e ${identity_pool_dir}/config.json ]]; then
    echo "Can't find pool config file ${identity_pool_dir}/config.json"
    exit 1
  fi

  local identity_pool_name=$(basename $identity_pool_dir)
  if [[ ! -s ${identity_pool_dir}/pool_info.json ]]; then
    echo "Creating identity pool: $identity_pool_name"
    aws cognito-identity create-identity-pool \
      --identity-pool-name $identity_pool_name \
      --cli-input-json "file://${identity_pool_dir}/config.json" \
      > ${identity_pool_dir}/pool_info.json
  fi
  create_cognito_auth_role ${identity_pool_dir}

  local pool_id=$(support/jsed.py ${identity_pool_dir}/pool_info.json 'IdentityPoolId')
  local role_arn=$(support/jsed.py ${identity_pool_dir}/role_info.json 'Role.Arn')
  echo "Updating identity pool roles"
  aws cognito-identity set-identity-pool-roles \
    --identity-pool-id ${pool_id} \
    --roles authenticated=${role_arn}
}

function help() {
  echo "#################################################"
  echo "# Serverless Single Page Apps - The Bash Helper #"
  echo "#################################################"
  echo 
  echo "Usage: sspa <action> [argument]"
  echo 
  echo "Where <action> is one of:"
  echo "    server                      - Run a local development server"
  echo "    create_bucket <bucket name> - Create a web-accessible bucket in S3"
  echo "    deploy_bucket <bucket name> - Deploy the application to an S3 bucket"
  echo "    create_pool <config dir>    - Create a new Cognito identity pool"
  echo 
  echo "Examples:"
  echo 
  echo "Deploy the web app to an S3 bucket:" 
  echo " $ sspa deploy_public learnjs.benrady.com"
  echo 
  echo "Create the 'learnjs' identity pool" 
  echo " $ sspa create_pool conf/cognito/identity_pools/learnjs"
  #echo 
  #echo "Deploy all Lambda functions:" 
  #echo " $ sspa deploy public"
  #echo 
  #echo "Create a new IAM role" 
  #echo " $ sspa create roles/dynamodb_admin"
  #echo 
  #echo "Upload an IAM role to AWS" 
  #echo " $ sspa update roles/dynamodb_admin"
}

action=${1:-"help"}

cd $root_dir

check_python

case "$action" in
  server)
    dev_server
    ;;

  create_bucket)
    if [[ $# -eq 2 ]]; then
      create_s3_bucket ${2}
    else
      echo "Please specify a bucket name"
      exit 1
    fi
    ;;

  deploy_bucket)
    if [[ $# -eq 2 ]]; then
      deploy_s3_bucket ${2}
    else
      echo "Please specify a bucket name"
      exit 1
    fi
    ;;

  create_pool)
    if [[ $# -eq 2 ]]; then
      create_identity_pool ${2}
    else
      echo "Please specify an identity pool configuration directory" 
      exit 1
    fi
    ;;

  *)
    help
    ;;
esac
